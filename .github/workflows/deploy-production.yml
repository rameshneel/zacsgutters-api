# .github/workflows/deploy-production.yml
name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          cache: "npm"
      - name: Install dependencies
        run: |
          npm install  # Ensure the package-lock.json is updated
          npm ci       # Clean install dependencies after package-lock.json is in sync
      - name: Run tests
        run: npm test
      - name: Run linting
        run: npm run lint

  build:
     name: Build and Push to Docker Hub
     runs-on: ubuntu-latest
     steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}  # आपका Docker Hub username
          password: ${{ secrets.DOCKER_PASSWORD }}  # अब यह आपका Access Token है
          # registry: docker.io (डिफ़ॉल्ट है, इसलिए छोड़ सकते हैं)

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/zacsgutter-api:${{ github.sha }}
            ${{ secrets.DOCKER_USERNAME }}/zacsgutter-api:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/zacsgutter-api:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/zacsgutter-api:buildcache,mode=max
  deploy:
   name: Deploy to Production
   needs: build
   runs-on: ubuntu-latest
   steps:
    - uses: actions/checkout@v3

    - name: Install SSH key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        known_hosts: ${{ secrets.KNOWN_HOSTS }}

    - name: Deploy to server
      run: |
        ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "
          # Create directory if not exists
          mkdir -p /var/www/backend/zacsgutter-api
          
          # Stop and remove existing container
          docker ps -q --filter 'name=zacsgutter-api' | xargs -r docker stop || true
          docker ps -aq --filter 'name=zacsgutter-api' | xargs -r docker rm || true
          
          # Pull new image
          docker pull ${{ secrets.DOCKER_REGISTRY }}/zacsgutter-api:${{ github.sha }}
          
          # Run new container
          docker run -d \
            --name zacsgutter-api \
            -p 3000:3000 \
            --restart unless-stopped \
            --env-file /var/www/backend/zacsgutter-api/.env\
            -e VERSION=${{ github.sha }} \
            ${{ secrets.DOCKER_REGISTRY }}/zacsgutter-api:${{ github.sha }}
        "

    - name: Verify deployment
      run: |
        ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "
          docker ps | grep zacsgutter-api
          docker logs zacsgutter-api --tail 50
        "
        curl -sSf https://${{ secrets.PRODUCTION_DOMAIN }}/health || exit 1